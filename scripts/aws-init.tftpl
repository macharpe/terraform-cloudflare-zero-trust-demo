#cloud-config
hostname: ${hostname}
package_update: true
package_upgrade: true

packages:
  - wget
  - curl
  - traceroute
  - build-essential
  - hping3
  - net-tools
  - unzip

users:
  - default
%{ if role == "browser_ssh" ~}
%{ for user in users ~}
  - name: ${user}
    passwd: ${user}
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    lock_passwd: false
%{ endfor ~}
  - name: ${okta_contractor_username}
    passwd: ${okta_contractor_password}
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    lock_passwd: false
%{ endif ~}

%{ if role == "vnc" ~}
write_files:
  - path: /tmp/setup-vnc-complete.sh
    content: |
      #!/bin/bash

      # Create log file with proper permissions
      touch /tmp/vnc-setup.log
      chmod 666 /tmp/vnc-setup.log

      echo "=== Starting Complete VNC Setup ===" >> /tmp/vnc-setup.log

      # Install packages with retry logic
      echo "Installing packages..." >> /tmp/vnc-setup.log
      for i in {1..3}; do
          apt-get update && break
          echo "Package update attempt $i failed, retrying..." >> /tmp/vnc-setup.log
          sleep 10
      done

      # Install VNC and desktop packages
      PACKAGES="xfce4 xfce4-goodies tightvncserver dbus-x11 thunar firefox"
      for package in $PACKAGES; do
          echo "Installing $package..." >> /tmp/vnc-setup.log
          if apt-get install -y $package; then
              echo "$package installed successfully" >> /tmp/vnc-setup.log
          else
              echo "WARNING: $package installation failed" >> /tmp/vnc-setup.log
          fi
      done

      # Create ubuntu user files
      echo "Creating user files..." >> /tmp/vnc-setup.log

      # Create .bashrc with green prompt
      cat > /home/ubuntu/.bashrc << 'BASHEND'
      case $- in *i*) ;; *) return;; esac
      HISTCONTROL=ignoreboth
      shopt -s histappend
      HISTSIZE=1000
      HISTFILESIZE=2000
      shopt -s checkwinsize

      force_color_prompt=yes
      if [ -n "$force_color_prompt" ]; then
          if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
              color_prompt=yes
          fi
      fi

      if [ "$color_prompt" = yes ]; then
          PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
      else
          PS1='\u@\h:\w\$ '
      fi
      unset color_prompt force_color_prompt

      if [ -x /usr/bin/dircolors ]; then
          eval "$(dircolors -b)"
          alias ls='ls --color=auto'
          alias grep='grep --color=auto'
      fi

      alias ll='ls -alF'
      alias la='ls -A'
      alias l='ls -CF'
      BASHEND

      # Create VNC directory and startup script
      mkdir -p /home/ubuntu/.vnc
      cat > /home/ubuntu/.vnc/xstartup << 'VNCEND'
      #!/bin/bash
      export $(dbus-launch)
      export XDG_CURRENT_DESKTOP=XFCE
      export XDG_SESSION_DESKTOP=xfce
      pkill -f xfce
      xfce4-panel &
      xfce4-desktop &
      xfwm4 &
      thunar &
      xfce4-terminal &
      VNCEND

      # Fix ownership and permissions
      chown ubuntu:ubuntu /home/ubuntu/.bashrc
      chown -R ubuntu:ubuntu /home/ubuntu/.vnc
      chmod +x /home/ubuntu/.vnc/xstartup
      chmod 644 /home/ubuntu/.bashrc

      # Find VNC binaries
      VNCSERVER=$(which vncserver 2>/dev/null || find /usr -name "vncserver" 2>/dev/null | head -1)
      VNCPASSWD=$(which vncpasswd 2>/dev/null || find /usr -name "vncpasswd" 2>/dev/null | head -1)

      echo "VNC Server found at: $VNCSERVER" >> /tmp/vnc-setup.log
      echo "VNC Passwd found at: $VNCPASSWD" >> /tmp/vnc-setup.log

      if [ -z "$VNCSERVER" ] || [ -z "$VNCPASSWD" ]; then
          echo "ERROR: VNC binaries not found!" >> /tmp/vnc-setup.log
          exit 1
      fi

      # Set VNC password as ubuntu user
      echo "Setting VNC password..." >> /tmp/vnc-setup.log
      sudo -u ubuntu bash << VNCSUDO
      mkdir -p ~/.vnc
      echo "${vnc_password}" | $VNCPASSWD -f > ~/.vnc/passwd
      chmod 600 ~/.vnc/passwd
      VNCSUDO

      # Create systemd service BEFORE starting VNC
      echo "Creating systemd service..." >> /tmp/vnc-setup.log
      cat > /etc/systemd/system/vncserver@.service << SERVICEEND
      [Unit]
      Description=TightVNC server
      After=syslog.target network.target

      [Service]
      Type=forking
      User=ubuntu
      Group=ubuntu
      WorkingDirectory=/home/ubuntu
      PIDFile=/home/ubuntu/.vnc/%H:%i.pid
      ExecStartPre=-$VNCSERVER -kill :%i > /dev/null 2>&1
      ExecStart=$VNCSERVER -depth 24 -geometry 1280x720 :%i
      ExecStop=$VNCSERVER -kill :%i

      [Install]
      WantedBy=multi-user.target
      SERVICEEND

      # Reload systemd and enable service
      systemctl daemon-reload
      systemctl enable vncserver@1.service

      # Start VNC through systemd (not manually)
      echo "Starting VNC service..." >> /tmp/vnc-setup.log
      systemctl start vncserver@1.service

      # Wait a moment for service to start
      sleep 5

      # Check if VNC is running
      if systemctl is-active --quiet vncserver@1.service; then
          echo "VNC service started successfully!" >> /tmp/vnc-setup.log
      else
          echo "VNC service failed to start, trying manual start..." >> /tmp/vnc-setup.log
          sudo -u ubuntu $VNCSERVER :1 -geometry 1280x720 -depth 24 >> /tmp/vnc-setup.log 2>&1
      fi

      # Final status check
      netstat -tlnp | grep 5901 >> /tmp/vnc-setup.log 2>&1 || echo "Port 5901 not listening" >> /tmp/vnc-setup.log
      systemctl status vncserver@1.service >> /tmp/vnc-setup.log 2>&1

      echo "=== VNC Setup Complete ===" >> /tmp/vnc-setup.log
    permissions: "0755"
%{ endif ~}

runcmd:
  # Set hostname
  - hostnamectl set-hostname ${hostname}
  
  # Set timezone
  - timedatectl set-timezone Europe/Paris

%{ if role == "browser_ssh" ~}
  # Configure SSH for browser access
  - echo "${ca_cloudflare_browser}" > /etc/ssh/ca_cloudflare_browser.pub
  - chmod 600 /etc/ssh/ca_cloudflare_browser.pub
  - sed -i 's/^#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
  - sed -i '/PubkeyAuthentication yes/a TrustedUserCAKeys /etc/ssh/ca_cloudflare_browser.pub' /etc/ssh/sshd_config
%{ endif ~}

%{ if role == "cloudflared" ~}
  # Install cloudflared
  - sudo mkdir -p --mode=0755 /usr/share/keyrings
  - curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
  - echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared any main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
  - sudo apt-get update && sudo apt-get install cloudflared
  - sudo cloudflared service install ${tunnel_secret_aws}
%{ endif ~}

%{ if role == "vnc" ~}
  # Run the complete VNC setup
  - /tmp/setup-vnc-complete.sh
  
  # Create info file
  - |
    cat > /home/ubuntu/VNC_INFO.txt << 'INFOEND'
    VNC Server Setup Complete!

    Hostname: ${hostname}
    VNC Port: 5901
    VNC Password: ${vnc_password}

    VNC server should be running via systemd service.

    Commands:
    - Check status: sudo systemctl status vncserver@1.service
    - Restart VNC:  sudo systemctl restart vncserver@1.service
    - Check logs:   cat /tmp/vnc-setup.log
    - Check port:   sudo netstat -tlnp | grep 5901

    Connect your Cloudflare tunnel to: tcp://localhost:5901
    INFOEND

    chown ubuntu:ubuntu /home/ubuntu/VNC_INFO.txt
%{ endif ~}

  # Datadog Agent installation
  - 'DD_API_KEY=${datadog_api_key} DD_SITE=${datadog_region} bash -c "$(curl -L https://install.datadoghq.com/scripts/install_script_agent7.sh)" > /tmp/dd_install.log 2>&1'

%{ if role == "vnc" ~}
final_message: |
  VNC setup complete on ${hostname}!
  VNC should be accessible on port 5901.
  Check logs: cat /tmp/vnc-setup.log
%{ else ~}
final_message: |
  AWS ${role} setup complete on ${hostname}!
%{ endif ~}