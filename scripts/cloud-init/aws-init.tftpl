#cloud-config
hostname: ${hostname}
package_update: true
package_upgrade: true

packages:
  - wget
  - curl
  - traceroute
  - build-essential
  - hping3
  - net-tools
  - unzip

users:
  - default
%{ if role == "browser_ssh" ~}
%{ for user in users ~}
  - name: ${user}
    passwd: ${user}
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    lock_passwd: false
%{ endfor ~}
  - name: ${okta_contractor_username}
    passwd: ${okta_contractor_password}
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    lock_passwd: false
%{ endif ~}

%{ if role == "vnc" ~}
write_files:
  - path: /usr/local/bin/vnc-status
    content: |
      #!/bin/bash
      # Enhanced VNC status monitoring command
      echo "=== VNC Server Status ==="
      echo ""

      # Check if setup completed
      if [ -f /tmp/vnc-setup.log ]; then
          if grep -q "VNC setup completed at" /tmp/vnc-setup.log 2>/dev/null; then
              echo "✅ VNC setup completed"
              COMPLETED_TIME=$(grep "VNC setup completed at" /tmp/vnc-setup.log | tail -1)
              echo "   $COMPLETED_TIME"
              # Show elapsed time if available
              if grep -q "Setup Duration:" /tmp/vnc-setup.log 2>/dev/null; then
                  DURATION=$(grep "Setup Duration:" /tmp/vnc-setup.log | tail -1)
                  echo "   $DURATION"
              fi
          else
              # Show installation progress
              if [ -f /tmp/vnc-progress.pct ]; then
                  PCT=$(cat /tmp/vnc-progress.pct 2>/dev/null || echo "0")
                  echo "🚧 VNC installation progress: $PCT%"
                  if [ -f /tmp/vnc-progress.txt ]; then
                      echo "   Current step:"
                      tail -1 /tmp/vnc-progress.txt 2>/dev/null | sed 's/^/   /'
                  fi
              else
                  echo "🚧 VNC setup in progress..."
                  echo "   Recent activity:"
                  tail -3 /tmp/vnc-setup.log 2>/dev/null | sed 's/^/   /'
              fi
          fi
      else
          echo "⚠️  VNC setup not started yet"
          exit 1
      fi

      echo ""
      echo "=== Service Status ==="

      # Check VNC service
      if systemctl is-active --quiet vncserver@1.service 2>/dev/null; then
          echo "🟢 VNC service: Running"
          # Check if port is actually listening (try multiple methods)
          if sudo lsof -i :5901 >/dev/null 2>&1 || ss -tln 2>/dev/null | grep -q ':5901' || netstat -tln 2>/dev/null | grep -q ':5901'; then
              echo "🟢 Port 5901: Listening"
          else
              echo "🔴 Port 5901: Not listening (service may be starting)"
          fi
      else
          echo "🔴 VNC service: Not running"
          echo ""
          echo "To start VNC:"
          echo "  sudo systemctl start vncserver@1.service"
          echo ""
          echo "To check detailed status:"
          echo "  sudo systemctl status vncserver@1.service"
      fi

      # Show connection info if running
      if systemctl is-active --quiet vncserver@1.service 2>/dev/null; then
          echo ""
          echo "=== Connection Info ==="
          echo "📍 Hostname: ${hostname}"
          echo "🔐 VNC Port: 5901"
          echo "🔑 Password: Set in ~/.vnc/passwd"

          # Check for active VNC sessions
          echo ""
          echo "=== Active Sessions ==="
          SESSIONS=$(ps aux | grep -E "[X]tigervnc|[v]ncserver|[X]vnc" | grep -v grep | wc -l)
          if [ "$SESSIONS" -gt 0 ]; then
              echo "📊 Active VNC processes: $SESSIONS"
              ps aux | grep -E "[X]tigervnc|[v]ncserver|[X]vnc" | grep -v grep | awk '{print "   " $11}' | head -3
          else
              echo "📊 No active VNC processes found"
          fi
      fi

      # Quick troubleshooting tips
      if ! systemctl is-active --quiet vncserver@1.service 2>/dev/null; then
          echo ""
          echo "=== Troubleshooting ==="
          echo "📋 Check setup log: tail -50 /tmp/vnc-setup.log"
          echo "📋 Check service log: sudo journalctl -u vncserver@1.service -n 50"
          echo "📋 Restart service: sudo systemctl restart vncserver@1.service"
      fi
    permissions: "0755"
%{ endif ~}

runcmd:
  # Wait briefly for network to be ready
  - sleep 10

  # Set hostname
  - hostnamectl set-hostname ${hostname}

  # Set timezone
  - timedatectl set-timezone Europe/Paris

%{ if role == "browser_ssh" ~}
  # Configure SSH for browser access
  - echo "${ca_cloudflare_browser}" > /etc/ssh/ca_cloudflare_browser.pub
  - chmod 600 /etc/ssh/ca_cloudflare_browser.pub
  - sed -i 's/^#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
  - sed -i '/PubkeyAuthentication yes/a TrustedUserCAKeys /etc/ssh/ca_cloudflare_browser.pub' /etc/ssh/sshd_config
  - systemctl restart ssh
%{ endif ~}

%{ if role == "cloudflared" ~}
  # Install cloudflared
  - |
    echo "Installing cloudflared..."

    # Setup cloudflared repository
    sudo mkdir -p --mode=0755 /usr/share/keyrings
    curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
    echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared any main' | sudo tee /etc/apt/sources.list.d/cloudflared.list

    # Install cloudflared
    sudo apt-get update
    sudo apt-get install -y cloudflared

    # Install cloudflared service with token
    sudo cloudflared service install ${tunnel_secret_aws}

    # Explicitly restart cloudflared service (following GCP pattern)
    echo "Starting cloudflared service..."
    systemctl restart cloudflared
    sleep 10

    # Check service status
    if systemctl is-active --quiet cloudflared; then
        echo "Cloudflared service is running successfully"
        systemctl status cloudflared --no-pager
    else
        echo "WARNING: Cloudflared service may not be running properly"
        systemctl status cloudflared --no-pager
        # Try to restart if not running
        echo "Attempting to restart cloudflared..."
        systemctl restart cloudflared
        sleep 10
        systemctl status cloudflared --no-pager
    fi

    echo "Cloudflared setup completed"
%{ endif ~}

%{ if role == "vnc" ~}
  # Install VNC packages and setup (optimized for AWS 16KB limit)
  - |
    echo "=== VNC Setup Started ===" > /tmp/vnc-setup.log
    START_TIME=$(date +%s)

    # Progress tracking function
    update_progress() {
        local step=$1 total=8 msg="$2"
        local pct=$((step * 100 / total))
        echo "[$pct%] $msg" | tee -a /tmp/vnc-progress.txt
        echo "$pct" > /tmp/vnc-progress.pct
        echo "$msg" >> /tmp/vnc-setup.log
    }

    update_progress 1 "Starting VNC installation..."

    # Enable universe repository (required for Ubuntu 24.04)
    update_progress 2 "Enabling universe repository..."
    add-apt-repository universe -y >> /tmp/vnc-setup.log 2>&1
    apt-get update >> /tmp/vnc-setup.log 2>&1

    # Install packages (using tigervnc for Ubuntu 24.04)
    update_progress 3 "Installing VNC packages..."
    DEBIAN_FRONTEND=noninteractive apt-get install -y tigervnc-standalone-server tigervnc-common dbus-x11 nano >> /tmp/vnc-setup.log 2>&1

    update_progress 4 "Installing XFCE desktop environment..."
    DEBIAN_FRONTEND=noninteractive apt-get install -y xfce4 xfce4-goodies >> /tmp/vnc-setup.log 2>&1

    # Create ubuntu user configuration
    update_progress 5 "Creating VNC user configuration..."

    # Create .bashrc with green prompt
    cat > /home/ubuntu/.bashrc << 'BASHRC_EOF'
    case $- in *i*) ;; *) return;; esac
    HISTCONTROL=ignoreboth
    shopt -s histappend
    HISTSIZE=1000
    HISTFILESIZE=2000
    shopt -s checkwinsize
    force_color_prompt=yes
    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
            color_prompt=yes
        fi
    fi
    if [ "$color_prompt" = yes ]; then
        PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt
    if [ -x /usr/bin/dircolors ]; then
        eval "$(dircolors -b)"
        alias ls='ls --color=auto'
        alias grep='grep --color=auto'
    fi
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
    BASHRC_EOF

    # Create VNC directory and startup script
    mkdir -p /home/ubuntu/.vnc
    cat > /home/ubuntu/.vnc/xstartup << 'XSTARTUP_EOF'
    #!/bin/bash
    # Simple XFCE startup script for VNC
    startxfce4
    XSTARTUP_EOF

    # Fix ownership and permissions
    chown ubuntu:ubuntu /home/ubuntu/.bashrc
    chown -R ubuntu:ubuntu /home/ubuntu/.vnc
    chmod +x /home/ubuntu/.vnc/xstartup
    chmod 644 /home/ubuntu/.bashrc

    # Set VNC password (using tigervnc's vncpasswd)
    update_progress 6 "Setting up VNC authentication..."
    sudo -u ubuntu bash << 'VNCSUDO'
    mkdir -p ~/.vnc
    echo "${vnc_password}" | vncpasswd -f > ~/.vnc/passwd
    chmod 600 ~/.vnc/passwd
    VNCSUDO

    # Find VNC binaries and create systemd service
    update_progress 7 "Configuring VNC systemd service..."
    # Try multiple possible VNC server locations for tigervnc
    VNCSERVER=$(which vncserver 2>/dev/null || which tigervncserver 2>/dev/null || which Xtigervnc 2>/dev/null || find /usr -name "vncserver" 2>/dev/null | head -1 || find /usr -name "tigervncserver" 2>/dev/null | head -1)
    echo "VNC Server found at: $VNCSERVER" >> /tmp/vnc-setup.log

    if [ -z "$VNCSERVER" ]; then
        echo "ERROR: VNC server binary not found!" >> /tmp/vnc-setup.log
        echo "Available VNC packages:" >> /tmp/vnc-setup.log
        dpkg -l | grep vnc >> /tmp/vnc-setup.log 2>&1
        exit 1
    fi

    cat > /etc/systemd/system/vncserver@.service << SERVICEEND
    [Unit]
    Description=TigerVNC server
    After=syslog.target network.target

    [Service]
    Type=forking
    User=ubuntu
    Group=ubuntu
    WorkingDirectory=/home/ubuntu
    PIDFile=/home/ubuntu/.vnc/%H:%i.pid
    ExecStartPre=-$VNCSERVER -kill :%i
    ExecStart=$VNCSERVER -depth 24 -geometry 1280x720 -localhost no :%i
    ExecStop=$VNCSERVER -kill :%i

    [Install]
    WantedBy=multi-user.target
    SERVICEEND

    # Enable and start VNC service
    update_progress 8 "Starting VNC server..."
    systemctl daemon-reload
    systemctl enable vncserver@1.service
    systemctl start vncserver@1.service

    # Log completion
    echo "VNC setup completed at $(date)" >> /tmp/vnc-setup.log

    # Calculate and log elapsed time
    END_TIME=$(date +%s)
    ELAPSED=$((END_TIME - START_TIME))
    MINUTES=$((ELAPSED / 60))
    SECONDS=$((ELAPSED % 60))
    echo "⏱️  Setup Duration: $${MINUTES}m $${SECONDS}s" | tee -a /tmp/vnc-setup.log /tmp/vnc-progress.txt

    echo "100" > /tmp/vnc-progress.pct
    echo "[100%] VNC installation completed successfully!" | tee -a /tmp/vnc-progress.txt
    echo "VNC service status:" >> /tmp/vnc-setup.log
    systemctl status vncserver@1.service >> /tmp/vnc-setup.log 2>&1

  # Create info file and ensure vnc-status is accessible
  - |
    cat > /home/ubuntu/VNC_INFO.txt << 'INFOEND'
    VNC Server Setup Complete!

    Hostname: ${hostname}
    VNC Port: 5901
    VNC Password: ${vnc_password}

    VNC server should be running via systemd service.

    Commands:
    - Quick status:  vnc-status
    - Full status:   sudo systemctl status vncserver@1.service
    - Restart VNC:   sudo systemctl restart vncserver@1.service
    - Check logs:    cat /tmp/vnc-setup.log
    - Check port:    sudo lsof -i :5901

    Connect your Cloudflare tunnel to: tcp://localhost:5901
    INFOEND

    chown ubuntu:ubuntu /home/ubuntu/VNC_INFO.txt

    # Ensure vnc-status is executable and in PATH
    chmod +x /usr/local/bin/vnc-status

    # Add /usr/local/bin to PATH for ubuntu user if not already there
    if ! grep -q '/usr/local/bin' /home/ubuntu/.bashrc; then
        echo 'export PATH="/usr/local/bin:$PATH"' >> /home/ubuntu/.bashrc
    fi
%{ endif ~}

  # Datadog Agent installation and configuration
  - 'DD_API_KEY=${datadog_api_key} DD_SITE=${datadog_region} bash -c "$(curl -L https://install.datadoghq.com/scripts/install_script_agent7.sh)" > /tmp/dd_install.log 2>&1'
  - sleep 10
  - mkdir -p /etc/datadog-agent/conf.d
  - |
    # Enhanced Datadog configuration for AWS
    cat >> /etc/datadog-agent/datadog.yaml << 'DDEOF'
    process:
      enabled: true
    tags:
      - environment:zero-trust-demo
      - cloud:aws
      - role:${role}
      - managed-by:terraform
    log_level: info
    log_file: /var/log/datadog/agent.log
    DDEOF
  - |
    # Process monitoring for zero-trust components
    cat > /etc/datadog-agent/conf.d/process.yaml << 'PROCEOF'
    init_config:
    instances:
      - name: zero_trust_processes
        search_string:
          - cloudflared
          - vnc
          - Xvnc
          - python3
          - ssh
        exact_match: false
        collect_children: true
        user: root
    PROCEOF
  - |
    # System metrics enhancement
    cat > /etc/datadog-agent/conf.d/system_core.yaml << 'SYSEOF'
    init_config:
    instances:
      - collect_service_check: true
        tags:
          - environment:zero-trust-demo
          - cloud:aws
          - role:${role}
    SYSEOF
  - |
    # Directory monitoring for configuration files
    cat > /etc/datadog-agent/conf.d/directory.yaml << 'DIREOF'
    init_config:
    instances:
      - directory: /etc/ssh
        name: ssh_config_monitoring
        pattern: "*.conf"
        tags:
          - config_type:ssh
          - cloud:aws
          - role:${role}
      - directory: /etc/datadog-agent
        name: datadog_config_monitoring
        pattern: "*.yaml"
        tags:
          - config_type:datadog
          - cloud:aws
          - role:${role}
    DIREOF

    # VNC-specific monitoring for AWS VNC instances
    if [ "${role}" = "vnc" ]; then
      cat > /etc/datadog-agent/conf.d/tcp_check.yaml << 'VNCEOF'
      init_config:
      instances:
        - name: vnc_service_check
          host: localhost
          port: 5901
          timeout: 5
          tags:
            - service:vnc
            - cloud:aws
            - role:${role}
      VNCEOF
    fi
  - chmod 755 /opt/datadog-agent/embedded/bin/system-probe 2>/dev/null || true
  - systemctl restart datadog-agent
  - sleep 5
  - systemctl status datadog-agent --no-pager || true
  - echo "Datadog monitoring setup completed for aws - ${role}"

%{ if role == "vnc" ~}
final_message: |
  VNC setup complete on ${hostname}!
  VNC should be accessible on port 5901.
  Check logs: cat /tmp/vnc-setup.log
%{ else ~}
final_message: |
  AWS ${role} setup complete on ${hostname}!
%{ endif ~}