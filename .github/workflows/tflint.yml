name: TFLint Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.tflint.hcl'
      - '.github/workflows/tflint.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.tflint.hcl'
      - '.github/workflows/tflint.yml'
  workflow_dispatch:

env:
  TFLINT_VERSION: v0.52.0

jobs:
  tflint:
    name: TFLint Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache TFLint Plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tflint-

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Show TFLint Version
        run: tflint --version

      - name: Initialize TFLint
        run: tflint --init
        env:
          # GitHub token for downloading plugins
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TFLint on Root Module
        run: |
          echo "::group::TFLint Analysis - Root Module"
          tflint --format compact --color
          echo "::endgroup::"

      - name: Run TFLint on Cloudflare Module
        working-directory: ./modules/cloudflare
        run: |
          echo "::group::TFLint Analysis - Cloudflare Module"
          tflint --format compact --color --config ../../.tflint.hcl
          echo "::endgroup::"

      - name: Run TFLint on Azure Module
        working-directory: ./modules/azure
        run: |
          echo "::group::TFLint Analysis - Azure Module"
          tflint --format compact --color --config ../../.tflint.hcl
          echo "::endgroup::"

      - name: Run TFLint on SSH Keys Module
        working-directory: ./modules/keys
        run: |
          echo "::group::TFLint Analysis - SSH Keys Module"
          tflint --format compact --color --config ../../.tflint.hcl
          echo "::endgroup::"

      - name: Run TFLint on WARP Routing Module
        working-directory: ./modules/warp-routing
        run: |
          echo "::group::TFLint Analysis - WARP Routing Module"
          tflint --format compact --color --config ../../.tflint.hcl
          echo "::endgroup::"

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: tflint

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12.0"

      - name: Terraform Format Check
        run: |
          echo "::group::Terraform Format Check"
          if ! terraform fmt -check -recursive -diff; then
            echo "::error::Terraform files are not properly formatted. Run 'terraform fmt -recursive' locally."
            exit 1
          fi
          echo "✅ All Terraform files are properly formatted"
          echo "::endgroup::"

      - name: Terraform Validate - Root Module
        run: |
          echo "::group::Terraform Validate - Root Module"
          terraform init -backend=false
          terraform validate
          echo "✅ Root module validation passed"
          echo "::endgroup::"

      - name: Terraform Validate - Modules
        run: |
          echo "::group::Terraform Validate - All Modules"
          for module_dir in modules/*/; do
            if [ -d "$module_dir" ]; then
              echo "Validating module: $module_dir"
              cd "$module_dir"
              terraform init -backend=false
              terraform validate
              echo "✅ Module $module_dir validation passed"
              cd - > /dev/null
            fi
          done
          echo "::endgroup::"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [tflint, terraform-validate]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy Terraform Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [tflint, terraform-validate, security-scan]
    if: always()

    steps:
      - name: Validation Summary
        run: |
          echo "## 🔍 Terraform Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # TFLint Results
          if [ "${{ needs.tflint.result }}" == "success" ]; then
            echo "✅ **TFLint Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TFLint Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Terraform Validation Results
          if [ "${{ needs.terraform-validate.result }}" == "success" ]; then
            echo "✅ **Terraform Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Terraform Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Security Scan Results (only for PRs)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ needs.security-scan.result }}" == "success" ]; then
              echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Security Scan**: Issues Found" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Validation Tools Used:" >> $GITHUB_STEP_SUMMARY
          echo "- **TFLint ${{ env.TFLINT_VERSION }}**: Multi-cloud Terraform linting" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Validate**: Syntax and configuration validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Format**: Code formatting validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Trivy**: Infrastructure security scanning" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Next Steps**: Address any failed validations before merging." >> $GITHUB_STEP_SUMMARY